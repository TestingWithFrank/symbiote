// Generated by CoffeeScript 1.3.3
(function() {
  var R,
    __slice = [].slice;

  R = Raphael;

  symbiote.transformStack = function() {
    var chainerFor, currentMatrix, desc, descAndPop, pop, prefixedWithTranslate, push, rotate, skew, stack, translate;
    stack = [];
    currentMatrix = R.matrix();
    push = function() {
      stack.push(currentMatrix);
      currentMatrix = currentMatrix.clone();
      return this;
    };
    pop = function() {
      stack.pop();
      currentMatrix = _.last(stack);
      return this;
    };
    desc = function() {
      return currentMatrix.toTransformString();
    };
    descAndPop = function() {
      var str;
      str = desc();
      pop();
      return str;
    };
    prefixedWithTranslate = function(x, y) {
      var prefix;
      prefix = R.matrix();
      prefix.translate(x, y);
      prefix.add(currentMatrix);
      return prefix;
    };
    chainerFor = function(methodName) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        currentMatrix[methodName].apply(currentMatrix, args);
        return this;
      };
    };
    translate = chainerFor('translate');
    rotate = chainerFor('rotate');
    skew = function(x, y) {
      x = R.rad(x);
      y = R.rad(y);
      currentMatrix.add(1, 0, Math.tan(x), 1, 0, 0);
      currentMatrix.add(1, Math.tan(y), 0, 1, 0, 0);
      return this;
    };
    return {
      translate: translate,
      rotate: rotate,
      skew: skew,
      push: push,
      pop: pop,
      desc: desc,
      descAndPop: descAndPop,
      prefixedWithTranslate: prefixedWithTranslate
    };
  };

}).call(this);
